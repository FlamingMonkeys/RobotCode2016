// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3352.RobotCode2016;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc3352.RobotCode2016.commands.*;
import org.usfirst.frc3352.RobotCode2016.commands.DriveAcrossDefense_Auto.Defense;
import org.usfirst.frc3352.RobotCode2016.subsystems.*;

import com.ni.vision.NIVision;
import com.ni.vision.NIVision.Image;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command driveAcrossDefense;
    Command driveToDefense;
    Command doNothing;
    Command autonomousCommand;
    CameraServer server;
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Drivetrain drivetrain;
    public static ShooterAngle shooter;
    public static ShooterWheels shooterWheels;
    public static PowerDistributionPanel pdp;
    int session;
    public static boolean isAuto;
    public static boolean isVisionControl;
    public static boolean wasDisabled;
    public static double autoAltitude;
    
    public static ShooterPneumatics shooterpneumatics;
    
    public static GearShifter gearshift;
    public static Compressor comp;
    public static CameraServer camera;
    public static Image frame;
    public static Servo servo;
    
    public static double[] results = new double[5];

    static SendableChooser autoChooser;
    static SendableChooser defenseChooser;
    static Defense defense = Defense.ROCKWALL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrain = new Drivetrain();
        shooter = new ShooterAngle();
        shooterWheels = new ShooterWheels();
        shooterpneumatics = new ShooterPneumatics();
        pdp = new PowerDistributionPanel();
        
        gearshift = new GearShifter();
        comp = new Compressor();
        comp.start();
        servo = RobotMap.servo;
        
        autoChooser = new SendableChooser();
        defenseChooser = new SendableChooser();
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        driveAcrossDefense = new DriveAcrossDefense_Auto(defense);
        driveToDefense = new DriveToDefense_Auto();
        doNothing = new DoNothing_Auto();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

//	    CameraServer.getInstance().setSize(1);
    	
//    	frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);
    	
//    	session = NIVision.IMAQdxOpenCamera("cam0", NIVision.IMAQdxCameraControlMode.CameraControlModeController);
//	    NIVision.IMAQdxConfigureGrab(session);
	    
	    oi = new OI();
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    	RobotMap.cameraLED.set(false);
    	
    	autoChooser.addDefault("Do Nothing", doNothing);
    	autoChooser.addObject("Drive Across Defense", driveAcrossDefense);
    	autoChooser.addObject("Drive to Outer Works", driveToDefense);
    	SmartDashboard.putData("Auto modes", autoChooser);
    	
    	defenseChooser.addDefault("Rock Wall", Defense.ROCKWALL);
    	defenseChooser.addObject("Rough Terrain", Defense.ROUGH);
    	defenseChooser.addObject("Low Bar", Defense.LOWBAR);
    	defenseChooser.addObject("Ramparts", Defense.RAMPART);
    	defenseChooser.addObject("Moat", Defense.MOAT);
    	defenseChooser.addObject("Cheval de Frise", Defense.CHEVAL);
    	SmartDashboard.putData("Autonomous Defense", defenseChooser);
    	
    	gearshift.ShiftDown();
    	
    	isAuto = false;
    	wasDisabled = true;
    }

    public void disabledPeriodic() {
//    	NIVision.IMAQdxStartAcquisition(session);
//	    NIVision.IMAQdxGrab(session, frame, 1);
        
//	    CameraServer.getInstance().setImage(frame);
        
        Scheduler.getInstance().run();
        
        SmartDashboard.putString("Auto Selector", autoChooser.getSelected().toString());
        SmartDashboard.putString("Defense Selector", defenseChooser.getSelected().toString());
        SmartDashboard.putNumber("angle", shooter.getAngle());
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
    	autonomousCommand = (Command) autoChooser.getSelected();
    	defense = (Defense) defenseChooser.getSelected();
    	if(autonomousCommand == driveAcrossDefense){
    		if(defense == Defense.CHEVAL || defense == Defense.PORTCULLIS || defense == Defense.DRAWBRIDGE || defense == Defense.SALLY){
    			autonomousCommand = driveToDefense;
    		}else{
    			driveAcrossDefense = new DriveAcrossDefense_Auto(defense);
    		}
    	}
    	isAuto = true;
        SmartDashboard.putString("Auto", autoChooser.getSelected().toString());
        SmartDashboard.putString("Defense", defenseChooser.getSelected().toString());
        if (autonomousCommand != null) autonomousCommand.start();
        RobotMap.cameraLED.set(true);
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        RobotMap.cameraLED.set(true);
        comp.start();
        servo.set(0.0);
        isAuto = false;
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
//    	NIVision.IMAQdxStartAcquisition(session);
//	    NIVision.IMAQdxGrab(session, frame, 1);
        
//	    CameraServer.getInstance().setImage(frame);
	    
        Scheduler.getInstance().run();
        
        SmartDashboard.putBoolean("shift state", (Robot.gearshift.ShiftState()==Value.kReverse));
    }

    public void testInit() {
    	RobotMap.cameraLED.set(true);
    	isAuto = false;
    }
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
