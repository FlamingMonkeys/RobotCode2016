// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3352.RobotCode2016.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3352.RobotCode2016.Robot;
import org.usfirst.frc3352.RobotCode2016.RobotMap;

/**
 *
 */
public class Angle extends Command {

	double target;
	double lastTarget;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Angle() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	target = Robot.oi.getTarget();
    	
    	//deadband
    	if(Math.abs(target)<.1){
    		target = 0;
    	}
    	
    	if(RobotMap.shooterUpperLimit.get() && target>0){
    		target = 0;//arm is at top position; do not go higher
    	}else if(RobotMap.shooterLowerLimit.get() && target<0){
    		target = 0;//arm is at bottom position; do not go lower
    	}
    	
    	//TODO test fast-start code
    	if(target>0){
    		Robot.shooter.setAngle(1);
    	}else if(target<0){
    		Robot.shooter.setAngle(-1);
    	}
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    	target = Robot.oi.getTarget();
    	
    	//deadband
    	if(Math.abs(target)<.1){
    		target = 0;
    	}
    	
    	//ensure full output
    	if(target>.95){
    		target = 1;
    	}
    	if(target<-.95){
    		target = -1;
    	}
    	
    	//scale value to prevent moving too fast
    	if(target>0){
    		target = target * 1; //more power for up direction
    	}else{
    		target = target * .3; //less power for down direction
    	}
    	
    	if(!Robot.oi.getOverride()){
	    	if(RobotMap.shooterUpperLimit.get() && target>0){
	    		target = 0;//arm is at top position; do not go higher
	    	}else if(RobotMap.shooterLowerLimit.get() && target<0){
	    		target = 0;//arm is at bottom position; do not go lower
	    	}
    	}
    	
    	if(lastTarget==0 && target != 0){
    		if(target > 0){
    			target =  1;
    		}else{
    			target = -1;
    		}
    	}
    	
    	
    	
    	SmartDashboard.putNumber("angle speed", target);
    	Robot.shooter.setAngle(target);
    	lastTarget = target;
    	/*
    	double target = Robot.oi.getTarget(); //get target angle based on joystick position
    	target = (target+1)/2; //normalize from (-1 to 1) joystick range to (0 to 1) shooter angle range
    	Robot.shooter.setSetpoint(target);
    	*/
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return (target == 0);
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.shooter.setAngle(0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
