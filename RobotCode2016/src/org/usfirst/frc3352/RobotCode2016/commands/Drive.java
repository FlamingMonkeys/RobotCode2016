// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3352.RobotCode2016.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3352.RobotCode2016.Robot;

/**
 *
 */
public class Drive extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	static double leftPrev;
	static double rightPrev;
	double kRampLimit = .05;
    public Drive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	double forward = Robot.oi.getForwardVal();
    	double turn = Robot.oi.getTurnVal();
    	double left = forward + turn;
    	double right = forward - turn;
    	
    	if(left>.95){
    		left = 1;
    	}else if(left<-.95){
    		left = -1;
    	}
    	if(right>.95){
    		right = 1;
    	}else if(right<-.95){
    		right = -1;
    	}
    	
    	if(Math.abs(left)>1 || Math.abs(right)>1){
    		left = left / Math.max(Math.abs(left), Math.abs(right));
    		right = right / Math.max(Math.abs(left), Math.abs(right));
    	}
    	
    	left = ramp(left,leftPrev);
    	right = ramp(right, rightPrev);
    	
    	leftPrev = left;
    	rightPrev = right;
    	
    	Robot.drivetrain.drive(left, right);
    	SmartDashboard.putNumber("left", left);
    	SmartDashboard.putNumber("right", right);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.drivetrain.drive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
    
    private double ramp(double input, double lastVal){
    	double delta = Math.abs(input) - Math.abs(lastVal);
    	if(delta>kRampLimit){
    		if(input>lastVal){
    			input = lastVal + kRampLimit;
    		}else{
    			input = lastVal - kRampLimit;
    		}
    	}
    	return input;
    }
}
